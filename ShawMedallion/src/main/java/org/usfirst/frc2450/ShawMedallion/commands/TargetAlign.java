// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2450.ShawMedallion.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2450.ShawMedallion.Robot;
import org.usfirst.frc2450.ShawMedallion.subsystems.LimelightSubsystem;

/**
 *
 */
public class TargetAlign extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    boolean rightAlign;
    double previousTx;
    boolean isValidated;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TargetAlign(String direction) {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.limelightSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    rightAlign = direction == "right";
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        previousTx = LimelightSubsystem.getTx();
        isValidated = true;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double strafe = 0;
        double rotate = 0;
        if(validated())
         {
            rotate = Robot.driveDrainSubsytem.getRotateRate();
         }


        if(rightAlign)
        {
            strafe = Robot.driveDrainSubsytem.getRightStrafeRate();
        }
        else
        {
            strafe = Robot.driveDrainSubsytem.getLeftStrafeRate();
        }

        Robot.driveDrainSubsytem.getRobotDrive().driveCartesian(strafe,
         0, rotate);

    

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }

    public boolean validated()
    {
        if(!isValidated)
        {
            if(rightAlign)
            {
                if(previousTx < LimelightSubsystem.getTx())
                {
                    isValidated = true;
                }
                else if(previousTx > LimelightSubsystem.getTx())
                {
                    rightAlign = false;
                }
            } 
            else
            {
                if(previousTx > LimelightSubsystem.getTx())
                {
                    isValidated = true;
                }
                else if(previousTx < LimelightSubsystem.getTx())
                {
                    rightAlign = true;
                }
            }
        
            previousTx = LimelightSubsystem.getTx();
        }

      return isValidated;
    }

    
}
