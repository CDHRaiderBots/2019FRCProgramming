// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2450.ShawMedallion.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Preferences;

import org.usfirst.frc2450.ShawMedallion.Robot;

/**
 *
 */
public class ElevatorToPosition extends Command {
    private double m_speed;
    double P = .0002;
    double I = .00008;
    double error = 0;
   
    double integral = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ElevatorToPosition() {
       

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
       
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevatorSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    double targetdistance;
    @Override
    protected void initialize() {
        integral = 0;
        error = 0;
        
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        targetdistance = Preferences.getInstance().getDouble("Encoder Input", 0);
       
        // if(targetdistance > Robot.elevatorSubsystem.getEncoder().getDistance())
        // {
        //     Robot.elevatorSubsystem.setElevatorSpeed(ElevatorSpeed);
        // }
        // else
        // {
        //     Robot.elevatorSubsystem.setElevatorSpeed(ElevatorSpeed);
        // }
        
        SmartDashboard.putNumber("Encoder Distance", Robot.elevatorSubsystem.getEncoder().getDistance());
        error = Robot.elevatorSubsystem.getEncoder().getDistance() - targetdistance;
        integral += (error*.02);
        double ElevatorSpeed = (P*error + I*integral);
        if (ElevatorSpeed > 0.6){
            ElevatorSpeed = 0.6;
        }
        if(targetdistance > Robot.elevatorSubsystem.getEncoder().getDistance())
        {
            Robot.elevatorSubsystem.setElevatorSpeed(ElevatorSpeed);
        }
        else
        {
            double negElevatorSpeed = ElevatorSpeed * -1;
            Robot.elevatorSubsystem.setElevatorSpeed(negElevatorSpeed);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        double error = 0.2;
       return (Robot.elevatorSubsystem.getEncoder().getDistance() < targetdistance + error && Robot.elevatorSubsystem.getEncoder().getDistance() > targetdistance - error);

    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.elevatorSubsystem.setElevatorSpeed(0);
        
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
